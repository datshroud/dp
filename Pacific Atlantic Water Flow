class Solution {
public:
    void dfs(vector<vector<int>>& h, vector<vector<bool>>& visited, int i, int j, int m, int n){
        visited[i][j] = true;
        if (i > 0 && !visited[i - 1][j] && h[i - 1][j] >= h[i][j]) dfs(h, visited, i - 1, j, m, n);
        if (i < m - 1 && !visited[i + 1][j] && h[i + 1][j] >= h[i][j]) dfs(h, visited, i + 1, j, m, n);
        if (j > 0 && !visited[i][j - 1] && h[i][j - 1] >= h[i][j]) dfs(h, visited, i, j - 1, m, n);
        if (j < n - 1 && !visited[i][j + 1] && h[i][j + 1] >= h[i][j]) dfs(h, visited, i, j + 1, m, n);
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> ans;
        vector<vector<bool>> pacific(m, vector<bool>(n));
        vector<vector<bool>> atlantic(m, vector<bool>(n));
        for (int i = 0; i < m; i++){
            dfs(heights, pacific, i, 0, m, n);
            dfs(heights, atlantic, i, n - 1, m, n);
        }
        for (int i = 0; i < n; i++){
            dfs(heights, pacific, 0, i, m, n);
            dfs(heights, atlantic, m - 1, i, m, n);
        }
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (pacific[i][j] && atlantic[i][j]) ans.push_back({i, j});
            }
        }
        return ans;
    }
};
